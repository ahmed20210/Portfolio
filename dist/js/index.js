const myIcon=document.getElementById("myicon"),navb=(myIcon.addEventListener("click",()=>{for(let t=1;t<5;t++){const e=document.getElementById("myicon"+t);e.classList.toggle("icon"+t)}}),document.getElementById("fade-in")),navigation=(myIcon.addEventListener("click",()=>{navb.classList.toggle("show")}),navb.getElementsByTagName("a")),mySkills=(Array.from(navigation).map(t=>{t.addEventListener("click",()=>{navb.classList.remove("show");for(let t=1;t<5;t++){const e=document.getElementById("myicon"+t);e.classList.toggle("icon"+t)}})}),document.getElementById("myskills")),skills=[["HTML","./icons/html.png"],["CSS","./icons/css.png"],["sass","./icons/sass.png"],["Tailwind","./icons/tailwind.png"],["Bootstrap","./icons/bootstrap.png"],["MaterialUI","./icons/mui.png"],["Javascript","./icons/js.png"],["Typescript","./icons/ts.png"],["Reactjs","./icons/react.png"],["Nextjs","./icons/next.png"],["Reduxjs","./icons/redux.png"],["Nodejs","./icons/node.png"],["Expressjs","./icons/node-js.png"],["JWT","./icons/jwt.png"],["Mongodb","./icons/mongodb.png"],["Mocha","./icons/mocha.svg"],["Jest","./icons/jest.png"],["Ejs","./icons/html.png"],["Webpack","./icons/webpack.png"],["Gulpjs","./icons/gulp.png"]];function skill(){return skills.map(t=>`<li class='wow scale-in-center item-skill h-48 flex flex-wrap justify-center items-center flex-col p-5 md:p-10'><img class='skill ' src='${t[1]}' alt='' /><p>${t[0]}</p></li>`)}mySkills.innerHTML=skill().join(" ");const swiper=new Swiper(".swiper",{direction:"horizontal",loop:!0,autoplay:{delay:5e3},breakpoints:{640:{slidesPerView:1},768:{slidesPerView:2,spaceBetween:20},1024:{slidesPerView:3,spaceBetween:30}},pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}}),form=(new WOW({live:!1}).init(),document.getElementById("form-data")),email=form.getElementsByTagName("input")[0],Name=form.getElementsByTagName("input")[1],message=form.getElementsByTagName("textarea")[0],formButton=form.getElementsByTagName("input")[2];formButton.addEventListener("click",t=>{t.preventDefault(),fetch("http://localhost:3000/send",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:Name.value,email:email.value,message:message.value})}),console.log(Name.value,email.value,message.value)})(function(){function e(t,e){return function(){return t.apply(e,arguments)}}var i,t,n,a,o,r=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};function s(){}function l(){this.keys=[],this.values=[]}function c(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}function u(t){null==t&&(t={}),this.scrollCallback=e(this.scrollCallback,this),this.scrollHandler=e(this.scrollHandler,this),this.resetAnimation=e(this.resetAnimation,this),this.start=e(this.start,this),this.scrolled=!0,this.config=this.util().extend(t,this.defaults),null!=t.scrollContainer&&(this.config.scrollContainer=document.querySelector(t.scrollContainer)),this.animationNameCache=new n,this.wowEvent=this.util().createEvent(this.config.boxClass)}s.prototype.extend=function(t,e){var n,i;for(n in e)i=e[n],null==t[n]&&(t[n]=i);return t},s.prototype.isMobile=function(t){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)},s.prototype.createEvent=function(t,e,n,i){var o;return null==e&&(e=!1),null==n&&(n=!1),null==i&&(i=null),null!=document.createEvent?(o=document.createEvent("CustomEvent")).initCustomEvent(t,e,n,i):null!=document.createEventObject?(o=document.createEventObject()).eventType=t:o.eventName=t,o},s.prototype.emitEvent=function(t,e){return null!=t.dispatchEvent?t.dispatchEvent(e):e in(null!=t)?t[e]():"on"+e in(null!=t)?t["on"+e]():void 0},s.prototype.addEvent=function(t,e,n){return null!=t.addEventListener?t.addEventListener(e,n,!1):null!=t.attachEvent?t.attachEvent("on"+e,n):t[e]=n},s.prototype.removeEvent=function(t,e,n){return null!=t.removeEventListener?t.removeEventListener(e,n,!1):null!=t.detachEvent?t.detachEvent("on"+e,n):delete t[e]},s.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},t=s,n=this.WeakMap||this.MozWeakMap||(l.prototype.get=function(t){for(var e,n=this.keys,i=e=0,o=n.length;e<o;i=++e)if(n[i]===t)return this.values[i]},l.prototype.set=function(t,e){for(var n,i=this.keys,o=n=0,s=i.length;n<s;o=++n)if(i[o]===t)return void(this.values[o]=e);return this.keys.push(t),this.values.push(e)},l),i=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(c.notSupported=!0,c.prototype.observe=function(){},c),a=this.getComputedStyle||function(n,t){return this.getPropertyValue=function(t){var e;return o.test(t="float"===t?"styleFloat":t)&&t.replace(o,function(t,e){return e.toUpperCase()}),(null!=(e=n.currentStyle)?e[t]:void 0)||null},this},o=/(\-([a-z]){1})/g,this.WOW=(u.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0,callback:null,scrollContainer:null},u.prototype.init=function(){var t;return this.element=window.document.documentElement,"interactive"===(t=document.readyState)||"complete"===t?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},u.prototype.start=function(){var o,t,e,n,r;if(this.stopped=!1,this.boxes=function(){for(var t=this.element.querySelectorAll("."+this.config.boxClass),e=[],n=0,i=t.length;n<i;n++)o=t[n],e.push(o);return e}.call(this),this.all=function(){for(var t=this.boxes,e=[],n=0,i=t.length;n<i;n++)o=t[n],e.push(o);return e}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(t=0,e=(n=this.boxes).length;t<e;t++)o=n[t],this.applyStyle(o,!0);if(this.disabled()||(this.util().addEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live)return new i((r=this,function(t){for(var o,s,e=[],n=0,i=t.length;n<i;n++)s=t[n],e.push(function(){for(var t=s.addedNodes||[],e=[],n=0,i=t.length;n<i;n++)o=t[n],e.push(this.doSync(o));return e}.call(r));return e})).observe(document.body,{childList:!0,subtree:!0})},u.prototype.stop=function(){if(this.stopped=!0,this.util().removeEvent(this.config.scrollContainer||window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval)return clearInterval(this.interval)},u.prototype.sync=function(t){if(i.notSupported)return this.doSync(this.element)},u.prototype.doSync=function(t){var e,n,i,o,s;if(1===(t=null==t?this.element:t).nodeType){for(s=[],n=0,i=(o=(t=t.parentNode||t).querySelectorAll("."+this.config.boxClass)).length;n<i;n++)e=o[n],r.call(this.all,e)<0?(this.boxes.push(e),this.all.push(e),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(e,!0),s.push(this.scrolled=!0)):s.push(void 0);return s}},u.prototype.show=function(t){return this.applyStyle(t),t.className=t.className+" "+this.config.animateClass,null!=this.config.callback&&this.config.callback(t),this.util().emitEvent(t,this.wowEvent),this.util().addEvent(t,"animationend",this.resetAnimation),this.util().addEvent(t,"oanimationend",this.resetAnimation),this.util().addEvent(t,"webkitAnimationEnd",this.resetAnimation),this.util().addEvent(t,"MSAnimationEnd",this.resetAnimation),t},u.prototype.applyStyle=function(t,e){var n,i=t.getAttribute("data-wow-duration"),o=t.getAttribute("data-wow-delay"),s=t.getAttribute("data-wow-iteration");return this.animate((n=this,function(){return n.customStyle(t,e,i,o,s)}))},u.prototype.animate="requestAnimationFrame"in window?function(t){return window.requestAnimationFrame(t)}:function(t){return t()},u.prototype.resetStyle=function(){for(var t,e=this.boxes,n=[],i=0,o=e.length;i<o;i++)t=e[i],n.push(t.style.visibility="visible");return n},u.prototype.resetAnimation=function(t){if(0<=t.type.toLowerCase().indexOf("animationend"))return(t=t.target||t.srcElement).className=t.className.replace(this.config.animateClass,"").trim()},u.prototype.customStyle=function(t,e,n,i,o){return e&&this.cacheAnimationName(t),t.style.visibility=e?"hidden":"visible",n&&this.vendorSet(t.style,{animationDuration:n}),i&&this.vendorSet(t.style,{animationDelay:i}),o&&this.vendorSet(t.style,{animationIterationCount:o}),this.vendorSet(t.style,{animationName:e?"none":this.cachedAnimationName(t)}),t},u.prototype.vendors=["moz","webkit"],u.prototype.vendorSet=function(o,t){var s,r,l,e=[];for(s in t)r=t[s],o[""+s]=r,e.push(function(){for(var t=this.vendors,e=[],n=0,i=t.length;n<i;n++)l=t[n],e.push(o[""+l+s.charAt(0).toUpperCase()+s.substr(1)]=r);return e}.call(this));return e},u.prototype.vendorCSS=function(t,e){for(var n,i=a(t),o=i.getPropertyCSSValue(e),s=this.vendors,r=0,l=s.length;r<l;r++)n=s[r],o=o||i.getPropertyCSSValue("-"+n+"-"+e);return o},u.prototype.animationName=function(e){var n;try{n=this.vendorCSS(e,"animation-name").cssText}catch(t){n=a(e).getPropertyValue("animation-name")}return"none"===n?"":n},u.prototype.cacheAnimationName=function(t){return this.animationNameCache.set(t,this.animationName(t))},u.prototype.cachedAnimationName=function(t){return this.animationNameCache.get(t)},u.prototype.scrollHandler=function(){return this.scrolled=!0},u.prototype.scrollCallback=function(){var o;if(this.scrolled&&(this.scrolled=!1,this.boxes=function(){for(var t=this.boxes,e=[],n=0,i=t.length;n<i;n++)(o=t[n])&&(this.isVisible(o)?this.show(o):e.push(o));return e}.call(this),!this.boxes.length&&!this.config.live))return this.stop()},u.prototype.offsetTop=function(t){for(var e;void 0===t.offsetTop;)t=t.parentNode;for(e=t.offsetTop;t=t.offsetParent;)e+=t.offsetTop;return e},u.prototype.isVisible=function(t){var e=t.getAttribute("data-wow-offset")||this.config.offset,n=this.config.scrollContainer&&this.config.scrollContainer.scrollTop||window.pageYOffset,e=n+Math.min(this.element.clientHeight,this.util().innerHeight())-e,i=this.offsetTop(t),t=i+t.clientHeight;return i<=e&&n<=t},u.prototype.util=function(){return null!=this._util?this._util:this._util=new t},u.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},u)}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
